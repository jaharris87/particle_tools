function [time,time_pb,frame,m_unbound,m_bubble_bound,m_out,m_R260,m_ni56,m_fe,m_fe_aux,m_aux] = import_expl_mass(filename, startRow, endRow)
%IMPORTFILE2 Import numeric data from a text file as column vectors.
%   [TIME,TIME_TB,FRAME,m_unbound,m_bubble_bound,m_OUTSHK,m_NI56,m_FE,m_FE_AUX,m_AUX] = IMPORTFILE2(FILENAME) Reads
%   data from text file FILENAME for the default selection.
%
%   [TIME,TIME_TB,FRAME,m_unbound,m_bubble_bound,m_OUTSHK,m_NI56,m_FE,m_FE_AUX,m_AUX] = IMPORTFILE2(FILENAME,
%   STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   [time,time_tb,frame,m_unbound,m_bubble_bound,m_outshk,m_ni56,m_fe,m_fe_aux,m_aux] =
%   importfile2('trace_expl_mass.dat',5, 2639);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/01/10 14:44:24

%% Initialize variables.
if nargin<=2
    startRow = 5;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%13s%16s%10s%17s%17s%17s%17s%17s%17s%17s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try
% regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11]
    % Converts strings in the input cell array to numbers. Replaced non-numeric strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
time = cell2mat(raw(:, 1));
time_pb = cell2mat(raw(:, 2));
frame = cell2mat(raw(:, 3));
m_unbound = cell2mat(raw(:, 4));
m_bubble_bound = cell2mat(raw(:, 5));
m_out = cell2mat(raw(:, 6));
m_R260 = cell2mat(raw(:, 7));
m_ni56 = cell2mat(raw(:, 8));
m_fe = cell2mat(raw(:, 9));
m_fe_aux = cell2mat(raw(:, 10));
m_aux = cell2mat(raw(:, 11));

