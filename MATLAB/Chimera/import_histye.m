function [ye_bin,unb_mass,unb_vr0_mass] = import_histye(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [BIN_MIN,BIN_MAX,UNB_MASS,UNB_VR0_MASS] = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default selection.
%
%   [BIN_MIN,BIN_MAX,UNB_MASS,UNB_VR0_MASS] = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of
%   text file FILENAME.
%
% Example:
%   [bin_min,bin_max,unb_mass,unb_vr0_mass] = importfile('histye06735.dat',9, 33);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/11/25 14:15:56

%% Initialize variables.
if nargin<=2
    startRow = 9;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%17f%15f%15f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try
% regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post processing code is included. To generate code which works
% for unimportable data, select unimportable cells in a file and regenerate the script.

%% Allocate imported array to column variable names
bin_min = dataArray{:, 1};
bin_max = dataArray{:, 2};
unb_mass = dataArray{:, 3};
unb_vr0_mass = dataArray{:, 4};

ye_bin = [bin_min,bin_max(end)];
unb_mass(end+1) = 0;
unb_vr0_mass(end+1) = 0;


