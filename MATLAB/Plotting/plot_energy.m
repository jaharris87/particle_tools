%% plot_energy
% plot_energy creates a plot of the temporal evolution of the diagnostic energy and its components
function [ varargout ] = plot_energy( time, pe_grav, pe_thermal, pe_kin, plist, M_tracer, varargin )
%% Input Arguments
%   Variable        Type        Dimension   Description
%   --------        -------     ---------   -------------------------------------------------
%   time            Float        M          1D array of elapsed time for the data [s]
%     >=0
% 
%   pe_grav         Float       (M, N)      2D array of gravitational potential for all particles 
%                                               in 'plist' at times in 'time' [ergs/g]
% 
%   pe_thermal      Float       (M, N)      2D array of thermal energy for all particles
%                                               in 'plist' at times in 'time' [ergs/g]
% 
%   pe_kin          Float       (M, N)      2D array of kinetic energy for all particles 
%                                               in 'plist' at times in 'time' [ergs/g]
% 
%   plist           Integer     {N}         1D cell containing particle IDs to be included in the
%     >0                                        total energy for each time in 'time'
% 
%   M_tracer        Float        1          Individual tracer mass [g]
%     >0
%
%% Output arguments
%   Variable        Type        Dimension   Description
%   ---------       -------     ---------   -------------------------------------------------
%   axis_h          Float        3          Axis handle of the generated plot
%   line_h          Float        4          Object handles of the diagnostic, internal, kinetic,
%                                               and gravitational lines in the plot
%
%% Optional Input Arguments
%   Flag            Type        Dimension   Description
%   ---------       -------     ---------   -------------------------------------------------
%   TimeStart       Float        1          Beginning time for plot [s]
%     >=min(time)                               ( Default: min(time) )
%     < max(time)
%
%   TimeStop        Float        1          Ending time for plot [s]
%     > min(time)                               ( Default: max(time) )
%     <=max(time)
%
%   TimeBounce      Float        1          Time of core-bounce [s]
%     >=0                                       ( Default: 0.0 )
%
%   PlotTitle       String       1          Title for plot
%                                               ( Default: 'Particle Energy' )
%                                                               
%% Initialization
% Declare local variables
model_name = 'B12-WH07';
M_solar = 1.98892E+33;

% Create an instance of the inputParser class.
p = inputParser;

% Define required inputs
p.addRequired('time', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'vector', ...
                                         'real', ...
                                         '>=', 0}));
p.addRequired('pe_grav', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', ...
                                         'real'}));
p.addRequired('pe_thermal', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', ...
                                         'real'}));
p.addRequired('pe_kin', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', ...
                                         'real'}));
p.addRequired('plist', ...
              @(x)validateattributes(x, {'cell'}, ...
                                        {'vector'}));
p.addRequired('M_tracer', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'scalar', ...
                                         'real', ...
                                          '>', 0}));

% Parse, validate, and assign required input arguments.
p.parse( time, pe_grav, pe_thermal, pe_kin, plist, M_tracer );
time       = p.Results.time;
pe_grav    = p.Results.pe_grav;
pe_thermal = p.Results.pe_thermal;
pe_kin     = p.Results.pe_kin;
plist      = p.Results.plist;
M_tracer   = p.Results.M_tracer;

% Define optional inputs
p.addOptional('TimeBounce', 0.0, ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'scalar', ...
                                         'real', ...
                                         'nonnegative'}));
p.addOptional('TimeStart', min(time), ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'scalar', ...
                                         'real', ...
                                         'nonnegative', ...
                                         '>=', min(time), ...
                                         '<', max(time)}));
p.addOptional('TimeStop', max(time), ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'scalar', ...
                                         'real', ...
                                         'nonnegative', ...
                                         '>', min(time), ...
                                         '<=', max(time)}));
p.addOptional('PlotTitle', 'Particle Energy', ...
              @(x)validateattributes(x, {'char'}, ...
                                        {'row'}));

% Parse, validate, and assign optional input arguments
p.parse( time, pe_grav, pe_thermal, pe_kin, plist, M_tracer, varargin{:} );
tstart        = p.Results.TimeStart;
tstop         = p.Results.TimeStop;
tbounce       = p.Results.TimeBounce;
plot_title    = p.Results.PlotTitle;

% Calculate indices for plotting
istart = find( abs(time-tstart) == min(abs(time-tstart)));
istop  = find( abs(time-tstop) == min(abs(time-tstop)));

% Calculate the quantities to be plotted
e_diag = pe_kin + pe_thermal + pe_grav;
xplot  = time(istart:istop)-tbounce;
yplot  = zeros(length(xplot),5);
for i = istart:istop
    j = i - istart + 1;
    yplot(j,1) = sum(M_tracer*e_diag(i,plist{i}))*1e-51;
    yplot(j,2) = sum(M_tracer*pe_kin(i,plist{i}))*1e-51;
    yplot(j,3) = sum(M_tracer*pe_thermal(i,plist{i}))*1e-51;
    yplot(j,4) = sum(-M_tracer*pe_grav(i,plist{i}))*1e-51;
    yplot(j,5) = M_tracer*length(plist{i})/M_solar;
end

%% Figure & Axes Setup

% Generate the figure, slightly larger than the default size
fig_h = figure;

% Set up the energy axis for the plot
xlim      = [tstart-tbounce, tstop-tbounce*(1+1e-9)];
ylim      = [0, max(max(yplot(:,1:4)))*(1+1e-9)];
axis_h(1) = axes('Parent', fig_h, ...
                 'XLim', xlim, ...
                 'XMinorTick', 'on', ...
                 'YLim', ylim, ...
                 'YMinorTick', 'on', ...
                 'Box', 'off', ...
                 'NextPlot', 'replacechildren');
if( ~isempty(plot_title) )
    title(axis_h(1), plot_title);
end
grid(axis_h(1), 'on');
% box(axis_h(1), 'on');
ylabel(axis_h(1), 'Energy [B]');

% Create textbox containing descriptive parameters
if( tbounce == 0 )
    xlabel(axis_h(1), 'Elapsed time [ms]');
    format_string = strcat('%-18s %8s\n', ...
                           '%-10s (total) %5.3f s\n', ...
                           '%-11s (total) %5.3f s');
    text_string = sprintf(format_string, ...
                          'Model:', model_name, ...
                          'Time Start:', time(istart), ...
                          'Time Stop:', time(istop));
else
    xlabel(axis_h(1), 'Time after bounce [s]');
    format_string = strcat('%-18s %8s\n', ...
                           '%-19s %5.3f s\n', ...
                           '%-11s (total) %5.3f s\n', ...
                           '(post-bounce) %5.3f s\n', ...
                           '%-11s (total) %5.3f s\n', ...
                           '(post-bounce) %5.3f s');
    text_string = sprintf(format_string, ...
                          'Model:', model_name, ...
                          'Time Bounce:', tbounce, ...
                          'Time Start:', time(istart), ...
                          time(istart)-tbounce, ...
                          'Time Stop:', time(istop), ...
                          time(istop)-tbounce);
end
text_h(1) = text(max(get(axis_h(1),'XLim')), min(get(axis_h(1),'YLim')), ...
                 text_string, ...
                 'VerticalAlignment', 'bottom', ...
                 'HorizontalAlignment', 'right', ...
                 'Margin', 10, ...
                 'Background', 'w', ...
                 'EdgeColor', 'k', ...
                 'FontName', 'Consolas', ...
                 'Parent', axis_h(1));
set(text_h(1), 'Units', 'Pixels');
text_position = get(text_h(1), 'Extent');
text_margin = get(text_h(1), 'Margin');
set(text_h(1), 'Position', [text_position(1)+text_position(3)-2*text_margin, ...
                            text_position(2)+2*text_margin, ...
                            0 ]);
set(text_h(1), 'Units', 'data', ...
               'HandleVisibility', 'off');

% Set up the mass axis for the plot
axis_h(2) = axes('Parent', fig_h, ...
                 'Position', get(axis_h(1),'Position'), ...
                 'Color', 'none', ...
                 'XLim', get(axis_h(1),'XLim'), ...
                 'XTick', [], ...
                 'YAxisLocation', 'right', ...
                 'YLim', [0,max(yplot(:,5))], ...
                 'YTick', 0:0.1:max(yplot(:,5)), ...
                 'YMinorTick', 'on', ...
                 'Box', 'off', ...
                 'NextPlot', 'replacechildren');
ylabel(axis_h(2), 'Mass [M_{sun}]');

% Set up the axis for the plot box
axis_h(3) = axes('Parent', fig_h, ...
                 'Position', get(axis_h(1),'Position'), ...
                 'Color', 'none', ...
                 'XLim', get(axis_h(1),'XLim'), ...
                 'XTick', get(axis_h(1),'XTick'), ...
                 'XTickLabel', [], ...
                 'XMinorTick', 'on', ...
                 'YTick', [], ...
                 'Box', 'on', ...
                 'NextPlot', 'replacechildren');

% Link the axes along x-axis
linkaxes(axis_h,'x');

%% Energy Components Plot

% Plot the energy components
line_h(1:4) = plot(axis_h(1), xplot, yplot(:,1:4), ...
                             'LineWidth', 2.0, ...
                             'LineStyle', '-');
                         
%% Total Mass Plot

% Plot the mass
line_h(5) = plot(axis_h(2), xplot, yplot(:,5), ...
                            'LineWidth', 2.0, ...
                            'LineStyle', '-.');

%% Line Formats
                        
% Set the line styles/colors
set(line_h(1), 'Color', 'b', ...
               'LineStyle', '--');
set(line_h(2), 'Color', 'r');
set(line_h(3), 'Color', 'g');
set(line_h(4), 'Color', 'k');
set(line_h(5), 'Color', 'm');

%% Finalize

% Add a legend
leg_h = legend(line_h, {'Total (diagnostic)'; ...
                        'Kinetic'; ...
                        'Internal'; ...
                        '(-)Gravitational'; ...
                        'Mass'});
set(leg_h, 'Location', 'NorthWest');

% Output the axis and line object handles
varargout{1} = axis_h;
varargout{2} = line_h;

end

