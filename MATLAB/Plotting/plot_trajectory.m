%% plot_trajectory
% plot_trajectory creates a trajectory plot of the temporal history of tracer particle positions.
%
%% Function Definition
function [ varargout ] = plot_trajectory( time, radius, theta, v_rad, v_theta, plist, varargin )
%% Input Arguments
%   Variable        Type        Dimension   Description
%   --------        -------     ---------   -------------------------------------------------
%   time            Float        M          1D array of elapsed time for the data [s]
%     >=0
% 
%   radius          Float       (M, N)      2D array of radial position for all particles 
%     >=0                                       in 'plist' at times in 'time' [cm]
% 
%   theta           Float       (M, N)      2D array of angular position for all particles
%     >=0                                       in 'plist' at times in 'time' [rad]
%     <=pi
% 
%   v_rad           Float       (M, N)      2D array of radial velocity for all particles 
%                                               in 'plist' at times in 'time' [cm/s]
% 
%   v_theta         Float       (M, N)      2D array of angular velocity for all particles 
%                                               in 'plist' at times in 'time' [cm/s]
% 
%   plist           Integer      N          1D array containing particle IDs to be plotted
%     >0                                        (eg. 1:4000 or 1:40:4000 or [70,543,800,...]
% 
%% Output Arguments
%   Variable        Type        Dimension   Description
%   ---------       -------     ---------   -------------------------------------------------
%   axis_h          Float        5          Axis handles of the generated line/scatter plots
%   line_h          Float        N          Object handles of trajectory lines in plot
%   fig_h           Float        1          Figure handle for the generated axes
%
%% Optional Input Arguments
%   Flag            Variable        Type        Dimension   Description
%   ---------       --------        -------     ---------   -------------------------------------------------
%   TimeStart       tstart          Float        1          Beginning time for particle trajectory plot [s]
%     >=min(time)                                               ( Default: min(time) )
%     < max(time)
%
%   TimeStop        tstop           Float        1          Ending time for particle trajectory plot [s]
%     > min(time)                                               ( Default: max(time) )
%     <=max(time)
%
%   TimeBounce      tbounce         Float        1          Time of core-bounce [s]
%     >=0                                                       ( Default: 0.0 )
%
%   TimeStep        tstep           Float        1          Desired time step between frames of animation; if
%     >=0                                                       not given, or >= tstop-tstart, the routine
%                                                               will create a static plot [s]
%                                                               ( Default: max(time)-min(time) )
%
%   XLim            xlim            Float        2          X-axis limits for plotting [cm]
%                                                               ( Default: Nearest power of 10 of maximum
%                                                                          range(x) centered at 0 )
%
%   YLim            ylim            Float        2          Y-axis limits for plotting [cm]
%     >=0                                                       ( Default: [0, Nearest power of 10 of
%                                                                              maximum range(y)] )
%
%   CLim            clim            Float        2          Limits for colormap
%
%   CData           cdata           Float       (M, N)      Colormap data for current/final position in plot
%                                                               ( Default: empty )
%
%   ColorMap        cdata_cmap      Float       (P, 3)      Colormap for colormap data
%                                                               ( Default: empty )
%
%   SData           sdata           Float       (M, N)      Size data for current/final position in plot
%                                                               ( Default: empty )
%
%   ShowETime       show_etime      Logical      1          Flag for adding additional textbox annotation
%                                                               containing elapsed time and time from bounce
%                                                               for use in animations
%                                                               ( Default: false )
%   PlotTitle       plot_title      String       1          Title for plot
%                                                               ( Default: 'Tracer Particle Trajectories' )
%
%   PlotVelocity    plot_velocity   Logical      1          Flag for plotting velocity vector for particles
%                                                               at tstop.
%                                                               ( Default: false )
%
%   PlotInitial     plot_initial    Logical      1          Flag for plotting initial particle positions
%                                                               at tstart.
%                                                               ( Default: true )
%
%   PlotTimes        plot_times     Float        T          Plot particle positions at specified times [s]
%     >=min(time)                                               ( Default: empty )
%     <=max(time)
%
%   PlotFate        plot_fate       Logical      1          Flag for plotting color-coding particle positions
%                                                               with particle fate data supplied in cdata such
%                                                               that the values of cdata are as follows:
%                                                                   cdata = 0 (Unknown)
%                                                                   cdata = 1 (Bound)
%                                                                   cdata = 2 (Unbound, v_{r}<0)
%                                                                   cdata = 3 (Unbound, v_{r}>0)
%                                                                   cdata = 4 (Unshocked)
%                                                                   cdata = 5 (PNS)
%                                                               ( Default: false )
%
%   PlotShock       shock_radius,   Float       (2, M, N)   If specified, overlays plot with shock radius
%    >=0            shock_theta                                 ( Default: empty 2x1 cell )
%
%   PlotPath        plot_path       Logical      1          Flag for plotting path of trajetory in time
%                                                               ( Default: true )
%                                                               
%% Initialization

% Assign a name to the current model
model_name = 'B12-WH07';

% Create an instance of the inputParser class.
p = inputParser;
p.FunctionName = 'plot_trajectory';
p.KeepUnmatched = true;

% Define required inputs
p.addRequired('time', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'vector', 'real', '>=', 0}));
p.addRequired('radius', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', 'real', '>=', 0}));
p.addRequired('theta', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', 'real', '>=', 0, '<=', pi}));
p.addRequired('v_rad', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', 'real'}));
p.addRequired('v_theta', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', 'real'}));
p.addRequired('plist', ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'vector', 'integer', '>', 0}));

% Parse, validate, and assign required input arguments.
p.parse( time, radius, theta, v_rad, v_theta, plist );
time   = p.Results.time;
radius = p.Results.radius;
theta  = p.Results.theta;
v_rad  = p.Results.v_rad;
v_theta= p.Results.v_theta;
plist  = p.Results.plist;

% Calculate cartesian coordinates for plotting
xplot           = zeros(size(radius));
yplot           = zeros(size(radius));
xplot(:,plist)  = radius(:,plist) .* cos(theta(:,plist));
yplot(:,plist)  = radius(:,plist) .* sin(theta(:,plist));
vxplot(:,plist) = v_rad(:,plist) .* cos(theta(:,plist)) - v_theta(:,plist) .* sin(theta(:,plist));
vyplot(:,plist) = v_rad(:,plist) .* sin(theta(:,plist)) + v_theta(:,plist) .* cos(theta(:,plist));

xpow10 = ceil(log10(max(range(xplot(:,plist)))));
ypow10 = ceil(log10(max(range(yplot(:,plist)))));

% Define optional inputs
p.addOptional('TimeBounce', 0.0, ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'scalar', ...
                                         'real', ...
                                         'nonnegative'}));
p.addOptional('TimeStart', min(time), ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'scalar', ...
                                         'real', ...
                                         'nonnegative', ...
                                         '>=', min(time), ...
                                         '<', max(time)}));
p.addOptional('TimeStop', max(time), ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'scalar', ...
                                         'real', ...
                                         'nonnegative', ...
                                         '>=', min(time), ...
                                         '<=', max(time)}));
p.addOptional('TimeStep', max(time)-min(time), ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'scalar', ...
                                         'real', ...
                                         'nonnegative'}));
p.addOptional('XLim', roundn( max( range(xplot(:,plist))), max(xpow10,ypow10)-1 ) * [-1.0,1.0], ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'vector', ...
                                         'real', ...
                                         'numel', 2}));
p.addOptional('YLim', [0, roundn( max( range(yplot(:,plist))), max(xpow10,ypow10)-1 )], ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'vector', ...
                                         'real', ...
                                         'nonnegative', ...
                                         'numel', 2}));
p.addOptional('CLim', [], ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'vector', ...
                                         'real', ...
                                         'numel', 2}));
p.addOptional('CData', [], ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', ...
                                         'real'}));
p.addOptional('ColorMap', [], ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', ...
                                         'real', ...
                                         'ncols', 3, ...
                                          '>=', 0, ...
                                          '<=', 1}));
p.addOptional('SData', [], ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'2d', ...
                                         'real'}));
p.addOptional('ShowETime', false, ...
              @(x)validateattributes(x, {'logical'}, ...
                                        {'scalar'}));
p.addOptional('PlotTitle', 'Tracer Particle Trajectories', ...
              @(x)validateattributes(x, {'char'}, ...
                                        {'row'}));
p.addOptional('PlotVelocity', false, ...
              @(x)validateattributes(x, {'logical'}, ...
                                        {'scalar'}));
p.addOptional('PlotPath', true, ...
              @(x)validateattributes(x, {'logical'}, ...
                                        {'scalar'}));
p.addOptional('PlotInitial', true, ...
              @(x)validateattributes(x, {'logical'}, ...
                                        {'scalar'}));
p.addOptional('PlotTimes', [], ...
              @(x)validateattributes(x, {'numeric'}, ...
                                        {'vector', ...
                                         'real', ...
                                         'nonnegative', ...
                                         '>=', min(time), ...
                                         '<=', max(time)}));
p.addOptional('PlotFate', false, ...
              @(x)validateattributes(x, {'logical'}, ...
                                        {'scalar'}));
p.addOptional('PlotShock', cell(2,1), ...
              @(x)validateattributes(x, {'cell'}, ...
                                        {'numel', 2}));
                                    
% Parse, validate, and assign optional input arguments
p.parse( time, radius, theta, v_rad, v_theta, plist, varargin{:} );
tstart        = p.Results.TimeStart;
tstop         = p.Results.TimeStop;
tbounce       = p.Results.TimeBounce;
tstep         = p.Results.TimeStep;
xlim          = p.Results.XLim;
ylim          = p.Results.YLim;
clim          = p.Results.CLim;
show_etime    = p.Results.ShowETime;
plot_title    = p.Results.PlotTitle;
plot_velocity = p.Results.PlotVelocity;
plot_path     = p.Results.PlotPath;
plot_initial  = p.Results.PlotInitial;
plot_times    = p.Results.PlotTimes;
plot_fate     = p.Results.PlotFate;
cdata         = p.Results.CData;
cdata_cmap    = p.Results.ColorMap;
sdata         = p.Results.SData;
shock_radius  = p.Results.PlotShock{1};
shock_theta   = p.Results.PlotShock{2};

% Calculate cartesian coordinates for shock if necessary
if( ~isempty(shock_radius) && ~isempty(shock_theta) )
    plot_shock = true;
    shock_x = shock_radius .* cos(shock_theta);
    shock_y = shock_radius .* sin(shock_theta);
else
    plot_shock = false;
end

%% Figure & Axes Setup

% Determine appropriate limits for CData if necessary
if( ~isempty(cdata) )
    plot_cdata = true;
    if( isempty(clim) && ~plot_fate )
        clim(:,1) = max( min(cdata(:,plist),[],2), mean(cdata(:,plist),2)-std(cdata(:,plist),0,2) );
        clim(:,2) = min( max(cdata(:,plist),[],2), mean(cdata(:,plist),2)+std(cdata(:,plist),0,2) );
    elseif( plot_fate )
        clim = repmat([0,5],length(time),1);
    else
        clim = repmat(clim,length(time),1);
    end
    if( isempty(cdata_cmap) && ~plot_fate )
        cdata_cmap = jet(64);
    elseif( plot_fate )
        
        % This colormap corresponds with prior particle fate plots, but could be easily modified
        %   or taken as user input
        cdata_cmap(1,:)   = [80 80 80];
        cdata_cmap(2,:)   = [126 47 142];
        cdata_cmap(3,:)   = [255 0 0];
        cdata_cmap(4,:)   = [0 114 189];
        cdata_cmap(5,:)   = [80 80 80];
        cdata_cmap(6,:)   = [0 0 0];
        cdata_cmap(1:6,:) = cdata_cmap / 255;
        
    end
else
    plot_cdata = false;
end

if( ~isempty(sdata) )
    plot_sdata = true;
    sdata(sdata<=0) = 1;
else
    plot_sdata = false;
end

% Determine axes tick mark locations
xpow10 = floor(log10(range(xlim)));
ypow10 = floor(log10(range(ylim)));
xtick = ( roundn(xlim(1),xpow10-1) - sign(xlim(1))*( 10^(max(xpow10,ypow10)-1) ) ):...
        ( 10^(max(xpow10,ypow10)-1) ):...
        ( roundn(xlim(2),xpow10-1) - sign(xlim(2))*( 10^(max(xpow10,ypow10)-1) ) );
ytick = ( roundn(ylim(1),ypow10-1) + 10^(max(xpow10,ypow10)-1) ):...
        ( 10^(max(xpow10,ypow10)-1) ):...
        ( roundn(ylim(2),ypow10-1) - 10^(max(xpow10,ypow10)-1) );
xticklabel = sprintf('%3.1f', xtick .* 10^(-(max(xpow10,ypow10)-1)));
yticklabel = sprintf('%3.1f', ytick .* 10^(-(max(xpow10,ypow10)-1)));

% Determine a unique color for each particle
ColorSet = varycolor(length(plist));

% Calculate indices for plotting
[~,istart] = min(abs(time-tstart));
[~,istop]  = min(abs(time-tstop));

% Generate the figure, slightly larger than the default size
fig_h = figure('PaperUnits','points', ...
               'Position', [100, 100, 1500, 700], ...
               'PaperOrientation', 'landscape', ...
               'PaperType', 'USLegal', ...
               'PaperPositionMode', 'auto');
           
           
%                  'XTickLabel', xticklabel, ...
%                  'YTickLabel', yticklabel, ...
         
% Set up the axes for the plot
axis_h(1) = axes('Parent', fig_h, ...
                 'XLim', xlim, ...
                 'XTick', xtick, ...
                 'YLim', ylim, ...
                 'YTick', ytick, ...
                 'PlotBoxAspectRatio', [range(xlim)/range(ylim), 1, 1], ...
                 'ColorOrder', ColorSet, ...
                 'NextPlot', 'replacechildren');
title(axis_h(1), plot_title);
grid(axis_h(1), 'on');
box(axis_h(1), 'on');
ylabel(axis_h(1), sprintf('X (x10^%d %s)', ...
                          3-mod((max(xpow10,ypow10)-3),3), ...
                          strcat(num2si(10^((max(xpow10,ypow10)-4))), 'm')), ...
                  'Interpreter','none');
xlabel(axis_h(1), sprintf('Y (x10^%d %s)', ...
                          3-mod((max(xpow10,ypow10)-3),3), ...
                          strcat(num2si(10^((max(xpow10,ypow10)-4))), 'm')), ...
                  'Interpreter','none');
              
% Create textbox containing descriptive parameters
if( tbounce == 0 )
    format_string = strcat('%-18s %8s\n', ...
                           '%-10s (total) %5.3f s\n', ...
                           '%-11s (total) %5.3f s');
    text_string = sprintf(format_string, ...
                          'Model:', model_name, ...
                          'Time Start:', time(istart), ...
                          'Time Stop:', time(istop));
else
    format_string = strcat('%-18s %8s\n', ...
                           '%-19s %5.3f s\n', ...
                           '%-11s (total) %5.3f s\n', ...
                           '(post-bounce) %5.3f s\n', ...
                           '%-11s (total) %5.3f s\n', ...
                           '(post-bounce) %5.3f s');
    text_string = sprintf(format_string, ...
                          'Model:', model_name, ...
                          'Time Bounce:', tbounce, ...
                          'Time Start:', time(istart), ...
                          max( time(istart)-tbounce, 0.0 ), ...
                          'Time Stop:', time(istop), ...
                          max( time(istop)-tbounce, 0.0 ));
end
% text_h(1) = text(max(get(axis_h(1),'XLim')), min(get(axis_h(1),'YLim')), ...
%                  text_string, ...
%                  'VerticalAlignment', 'bottom', ...
%                  'HorizontalAlignment', 'right', ...
%                  'Margin', 10, ...
%                  'Background', 'w', ...
%                  'EdgeColor', 'k', ...
%                  'FontName', 'Consolas', ...
%                  'Parent', axis_h(1));
% set(text_h(1), 'Units', 'Pixels');
% text_extent = get(text_h(1), 'Extent');
% text_margin = get(text_h(1), 'Margin');
% text_position = [ text_extent(1)+text_extent(3)-2*text_margin, ...
%                   text_extent(2)+2*text_margin, ...
%                   0 ];
% set(text_h(1), 'Position', text_position);
% set(text_h(1), 'Units', 'data', ...
%                'HandleVisibility', 'off');

% Generate additional axes for scatter overlay
axis_position = get(axis_h(1), 'Position');
axis_h(2) = axes('Parent', fig_h, ...
                 'Color', 'none', ...
                 'YTick', [], ...
                 'YTickLabel', [], ...
                 'XTick', [], ...
                 'XTickLabel', [], ...
                 'Position', axis_position, ...
                 'ColorOrder', ColorSet, ...
                 'PlotBoxAspectRatio', get(axis_h(1), 'PlotBoxAspectRatio'), ...
                 'NextPlot', 'replacechildren');
axis_h(3) = axes('Parent', fig_h, ...
                 'Color', 'none', ...
                 'YTick', [], ...
                 'YTickLabel', [], ...
                 'XTick', [], ...
                 'XTickLabel', [], ...
                 'Position', axis_position, ...
                 'PlotBoxAspectRatio', get(axis_h(1), 'PlotBoxAspectRatio'), ...
                 'NextPlot', 'replacechildren');
axis_h(4) = axes('Parent', fig_h, ...
                 'Color', 'none', ...
                 'YTick', [], ...
                 'YTickLabel', [], ...
                 'XTick', [], ...
                 'XTickLabel', [], ...
                 'Position', axis_position, ...
                 'PlotBoxAspectRatio', get(axis_h(1), 'PlotBoxAspectRatio'), ...
                 'NextPlot', 'replacechildren');
axis_h(5) = axes('Parent', fig_h, ...
                 'Color', 'none', ...
                 'YTick', [], ...
                 'YTickLabel', [], ...
                 'XTick', [], ...
                 'XTickLabel', [], ...
                 'Position', axis_position, ...
                 'PlotBoxAspectRatio', get(axis_h(1), 'PlotBoxAspectRatio'), ...
                 'NextPlot', 'add');
             
% Set up fixed colormap and extra axis for particle fate scatter plot
if plot_fate
    
    % The extra axis is used to set up the legend, since the fates are plotted
    %   using the scatter function for 4000 particles, but we only have 6 classifications
    axis_h(6) = axes('Parent', fig_h, ...
                     'Color', 'none', ...
                     'YTick', [], ...
                     'YTickLabel', [], ...
                     'XTick', [], ...
                     'XTickLabel', [], ...
                     'Position', axis_position, ...
                     'PlotBoxAspectRatio', get(axis_h(1), 'PlotBoxAspectRatio'), ...
                     'NextPlot', 'add');
    leg_label{1} = 'Bound (E_{diag} < 0)';
    leg_label{2} = 'Unbound, v_{r} < 0';
    leg_label{3} = 'Unbound, v_{r} > 0';
    leg_label{4} = 'Unshocked';
    leg_label{5} = 'PNS ({\rho} > {\rho}_{PNS})';
    
    % Plot dummy data corresponding to the scattergroup marker formats in axis_h(4)
    for i = 1:5
        scat_h(:,i) = plot( axis_h(6), 0, 0, ...
                                       'LineStyle', 'none', ...
                                       'Marker', 'o', ...
                                       'MarkerSize', 4, ...
                                       'MarkerEdgeColor', 'none', ...
                                       'MarkerFaceColor', cdata_cmap(i+1,:),...
                                       'DisplayName', leg_label{i} );
    end
    
    % Add the legend
    leg_h = legend( scat_h, leg_label );
    set( leg_h, 'Location', 'NorthWest', ...
                'Color', [1 1 1] );
    set(scat_h,'Visible','off');
end

% Set the colormap 
if plot_cdata
    colormap(axis_h(4), cdata_cmap);
end
             
% Keep all of the axes aligned
linkaxes(axis_h,'xy');

%% Animation Setup

% Open the animation file
if( tstep < time(istop)-time(istart) )
    animate = true;
    istep = find(abs(time((istart+1):istop)-time(istart)-tstep) == min(abs(time((istart+1):istop)-time(istart)-tstep)) );
    videoname = 'video_trajectory';
    vid_h = VideoWriter(videoname,'MPEG-4');
    vid_h.FrameRate = 15;
    open(vid_h);
else
    animate = false;
    istep = istop - istart;
end

%% Scatter Plot of Initial Location

% Plot the starting location
if plot_initial && isempty(plot_times)
    scatter(axis_h(2), xplot(istart,plist), yplot(istart,plist), ...
                       16, ...
                       'Marker', 'o', ...
                       'MarkerEdgeColor', 'k');
end

if( ~isempty(plot_times) )
    interval_index(1:length(plot_times)) = istop;
    for j = 1:length(plot_times)
        if plot_times(j) >= tstart && plot_times(j) <= tstop
            [~,interval_index(j)] = min( abs( time-plot_times(j) ) );
        end
    end
    interval_index = unique(interval_index);
    jjo = [];
end    

%% Trajectory Plot and Various Overlays

% Loop over desired time interval
k = istart+istep;
while k <= istop

    % Plot the trajectories
    if( plot_path )
        line_h = plot(axis_h(1), xplot(istart:k,plist), yplot(istart:k,plist), ...
                                 'LineWidth', 0.5, ...
                                 'LineStyle', '-');
    end
    
    % Plot the particle locations for the times specified up to the current time
    if( ~isempty(plot_times) )
        jj  = interval_index(interval_index <= k );
        if length(jj) == 1
            jj = repmat( jj, 1, 2 );
        end
        if length(jj) ~= length(jjo)
            plot(axis_h(2), xplot(jj,plist), yplot(jj,plist), ...
                            'LineStyle', 'none', ...
                            'Marker', 'o', ...
                            'MarkerSize', 4, ...
                            'MarkerFaceColor', 'none');
            jjo = jj;
        end
    end
    
    if( plot_sdata )
        splot = sdata(k,plist);
    else
        splot = 16;
    end

    % Plot the ending location with velocity vector if specified
    if( plot_velocity )
        quiver(axis_h(3), xplot(k,plist), yplot(k,plist), ...
                          vxplot(k,plist), vyplot(k,plist), ...
                          'Color', 'k', ...
                          'Marker', 'o', ...
                          'MarkerFaceColor', 'k', ...
                          'MarkerEdgeColor', 'none', ...
                          'MarkerSize', 3 );
    elseif( ~plot_cdata )
        scatter(axis_h(4), xplot(k,plist), yplot(k,plist), ...
                           splot, ...
                           'filled', ...
                           'Marker', 'o', ...
                           'MarkerFaceColor', 'k');
    end
    
    % Plot the colormap data if specified
    if( plot_cdata )
        scatter(axis_h(4), xplot(k,plist), yplot(k,plist), ...
                           splot, ...
                           'filled', ...
                           'Marker', 'o', ...
                           'CData', cdata(k,plist));
        set( axis_h(4), 'CLim', clim(k,1:2) );
    end
    
    % Plot the shock if specified
    if( plot_shock )
        plot(axis_h(5), shock_x(k,:), shock_y(k,:), ...
                        'LineStyle', '--', ...
                        'Color', 'k');
    end

    % Add textbox annotation of elapsed time since tstart
    if( show_etime )
        if( tbounce == 0 )
            format_string = strcat('%-13s (total) %5.3f s');
            text_string = sprintf(format_string, ...
                                  'Elapsed Time:', time(k));
        else
            format_string = strcat('%-13s (total) %5.3f s\n', ...
                                   '(post-bounce) %5.3f s');
            text_string = sprintf(format_string, ...
                                  'Elapsed Time:', time(k), ...
                                  time(k)-tbounce);
        end
        text_h(2) = text(max(get(axis_h(1),'XLim')), max(get(axis_h(1),'YLim')), ...
                         text_string, ...
                         'VerticalAlignment', 'top', ...
                         'HorizontalAlignment', 'right', ...
                         'Margin', 10, ...
                         'Background', 'w', ...
                         'EdgeColor', 'k', ...
                         'FontName', 'Consolas', ...
                         'Parent', axis_h(1));
        set(text_h(2), 'Units', 'Pixels');
        text_extent = get(text_h(2), 'Extent');
        text_margin = get(text_h(2), 'Margin');
        set(text_h(2), 'Position', [text_extent(1)+text_extent(3)-2*text_margin, ...
                                    text_extent(2)+text_extent(4)-2*text_margin, ...
                                    0 ]);
        set(text_h(2), 'Units', 'data');
    else
        text_h = 0;
    end

    % If there's not too many particles, add a legend
    if( length(plist) <= 20 && plot_path )
        leg_h = legend(axis_h(1), line_h, int2str(plist'));
        set(leg_h, 'Location', 'NorthWest');
    end
    
    if( animate )
        frame = getframe(fig_h);
        writeVideo(vid_h,frame);
    end
    
    istep = find(abs(time((k+1):istop)-time(k)-tstep) == min(abs(time((k+1):istop)-time(k)-tstep)) );
    k = k + istep;

end

%% Finalize

% Close the animation file
if( animate )
    close(vid_h);
end

% Assign values to output arguments
varargout{1} = axis_h;
if( plot_path )
    varargout{2} = line_h;
else
    varargout{2} = 0;
end
varargout{3} = fig_h;

end

