function [m,dm,dlogm,rho,drho,temp,ye,u,r,dr,dr_r,drho_rho] = import_initial_model(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   MODEL = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default selection.
%
%   MODEL = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   model = importfile('initial_model_s12_720.d', 1, 2193);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/01/22 12:19:03

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try
% regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7]
    % Converts strings in the input cell array to numbers. Replaced non-numeric strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7]);
rawCellColumns = raw(:, 1);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
model = raw;

thvar = strcmp( model(:,1), 'thvar' );
stvar = strcmp( model(:,1), 'stvar' );

rho  = cell2mat( model(thvar,3) );
temp = cell2mat( model(thvar,4) );
ye   = cell2mat( model(thvar,5) );

u    = cell2mat( model(stvar,3) );
% v    = cell2mat( model(stvar,4) );
% w    = cell2mat( model(stvar,5) );
dr   = cell2mat( model(stvar,6) );
r    = cell2mat( model(stvar,7) );

drho     = [ -rho(1); diff(rho) ];
drho_rho = drho ./ rho;

frpith = 4 * pi / 3;
dr3    = [ r(1)^3; r(2:end).^3 - r(1:end-1).^3 ];
dm     = frpith * rho .* dr3;
m      = cumsum( dm );
dlogm  = [ log(m(1)); diff(log(m)) ];

% Convert to km
r    = r  * 1e-5;
u    = u  * 1e-5;
dr   = dr * 1e-5;

dr_r     = dr ./ r;