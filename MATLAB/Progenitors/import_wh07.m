function [m,dm,r,dr,v_r,rho,drho,temp,press,e_int,enpy,v_th,abar,ye,xn,nuc_name,dr_r,drho_rho,dlogm] = import_wh07(filename, num_species, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   MODEL = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default selection.
%
%   MODEL = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   model = importfile('s12_08_moded.d', 2, 1101);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/01/22 14:46:49

%% Initialize variables.
delimiter = ' ';
if nargin<=3
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = strcat( repmat( '%s', 1, num_species+13 ),'%[^\n\r]' );

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try
% regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);
tmpData = dataArray(14:end);
for i = 1:length(tmpData)
   nuc_name(i) = tmpData{i}(1);
end
nuc_name = [ nuc_name(1:end-1), strsplit(nuc_name{end},' ') ];

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=1:length(dataArray)-1
    % Converts strings in the input cell array to numbers. Replaced non-numeric strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
model = cell2mat(raw(2:end,:));

%% Extract output data
m        = model(:,2);
r        = model(:,3);
v_r      = model(:,4);
rho      = model(:,5);
temp     = model(:,6);
press    = model(:,7);
e_int    = model(:,8);
enpy     = model(:,9);
v_th     = model(:,10);
abar     = model(:,11);
ye       = model(:,12);
xn       = model(:,14:end);

% Convert to km
% r   = r * 1e-5;
% v_r = v_r * 1e-5;

dlogm    = [ log(m(1)); diff(log(m)) ];
dm       = [ m(1); diff(m) ];
dr       = [ r(1); diff(r) ];
dr_r     = dr ./ r;
drho     = [ -rho(1); diff(rho) ];
drho_rho = drho ./ rho;

end
